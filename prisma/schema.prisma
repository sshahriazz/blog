datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    blogs         Blog[]
    comments      Comment[]
    followedBy    User[]    @relation("UserFollows", fields: [followedByIDs], references: [id])
    followedByIDs String[]  @db.ObjectId
    following     User[]    @relation("UserFollows", fields: [followingIDs], references: [id])
    followingIDs  String[]  @db.ObjectId
}

model Blog {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    seo         Seo?
    title       String
    coverImage  String?
    content     String
    isDraft     Boolean @default(true)
    isPublished Boolean @default(false)

    category Category?
    tags     Tags[]

    comments Comment[]

    author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String? @db.ObjectId
}

model Comment {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    comment String

    Children  Comment[] @relation("Comment_Children")
    parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parent_id String?   @db.ObjectId

    author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String? @db.ObjectId

    blog   Blog?   @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId String? @db.ObjectId
}

model Category {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String

    blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId String @unique @db.ObjectId
}

model Tags {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    Blog        Blog?   @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId      String? @db.ObjectId
}

model VerificationToken {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Seo {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    metaTitle       String
    metaDescription String
    metaImage       String
    metaSocial      MetaSocial[]
    keywords        String[]
    structuredData  Json
    metaRobots      String
    metaViewPort    String
    canonicalURL    String
    blog            Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId          String       @unique @db.ObjectId
}

model MetaSocial {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    title         String
    description   String
    image         String
    socialNetwork String
    Seo           Seo?    @relation(fields: [seoId], references: [id], onDelete: Cascade)
    seoId         String? @db.ObjectId
}
