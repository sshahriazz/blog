datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id String @id @default(cuid())

    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    blogs         Blog[]
    comments      Comment[]

    followedBy Follows[] @relation("following")
    following  Follows[] @relation("follower")

    password  String?
    username  String?    @unique
    role      Role       @default(USER)
    portfolio Portfolio?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Follows {
    follower    User   @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
}

model Portfolio {
    id     String @id @default(cuid())
    data   Json   @default("{}")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    SUPERADMIN
    USER
}

model Blog {
    id          String  @id @default(cuid())
    title       String
    coverImage  String?
    content     String
    isDraft     Boolean @default(true)
    isPublished Boolean @default(false)

    tags Tag[]

    comments Comment[]

    author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Comment {
    id      String @id @default(cuid())
    comment String

    children Comment[] @relation("Comment_Children")
    parent   Comment?  @relation("Comment_Children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId String?

    author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String?

    blog   Blog?   @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?
    Blog        Blog[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
